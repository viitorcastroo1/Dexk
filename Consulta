//
// Decompiled by Jadx - 1563ms
//
package e0;

import E0.n;
import F0.e;
import android.content.res.AssetManager;
import android.media.MediaMetadataRetriever;
import android.os.Build;
import android.system.Os;
import android.system.OsConstants;
import android.util.Log;
import java.io.BufferedInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.charset.Charset;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.TimeZone;
import java.util.regex.Pattern;
import java.util.zip.CRC32;

public final class a {
    public static final String[] E;
    public static final int[] F;
    public static final byte[] G;
    public static final d H;
    public static final d[][] I;
    public static final d[] J;
    public static final HashMap<Integer, d>[] K;
    public static final HashMap<String, d>[] L;
    public static final HashSet<String> M;
    public static final HashMap<Integer, Integer> N;
    public static final Charset O;
    public static final byte[] P;
    public static final byte[] Q;
    public final FileDescriptor a;
    public final AssetManager.AssetInputStream b;
    public int c;
    public final HashMap<String, c>[] d;
    public final HashSet e;
    public ByteOrder f;
    public boolean g;
    public int h;
    public int i;
    public int j;
    public int k;
    public int l;
    public static final boolean m = Log.isLoggable("ExifInterface", 3);
    public static final List<Integer> n = Arrays.asList(1, 6, 3, 8);
    public static final List<Integer> o = Arrays.asList(2, 7, 4, 5);
    public static final int[] p = {8, 8, 8};
    public static final int[] q = {8};
    public static final byte[] r = {-1, -40, -1};
    public static final byte[] s = {102, 116, 121, 112};
    public static final byte[] t = {109, 105, 102, 49};
    public static final byte[] u = {104, 101, 105, 99};
    public static final byte[] v = {79, 76, 89, 77, 80, 0};
    public static final byte[] w = {79, 76, 89, 77, 80, 85, 83, 0, 73, 73};
    public static final byte[] x = {-119, 80, 78, 71, 13, 10, 26, 10};
    public static final byte[] y = {101, 88, 73, 102};
    public static final byte[] z = {73, 72, 68, 82};
    public static final byte[] A = {73, 69, 78, 68};
    public static final byte[] B = {82, 73, 70, 70};
    public static final byte[] C = {87, 69, 66, 80};
    public static final byte[] D = {69, 88, 73, 70};

    static {
        "VP8X".getBytes(Charset.defaultCharset());
        "VP8L".getBytes(Charset.defaultCharset());
        "VP8 ".getBytes(Charset.defaultCharset());
        "ANIM".getBytes(Charset.defaultCharset());
        "ANMF".getBytes(Charset.defaultCharset());
        "XMP ".getBytes(Charset.defaultCharset());
        E = new String[]{"", "BYTE", "STRING", "USHORT", "ULONG", "URATIONAL", "SBYTE", "UNDEFINED", "SSHORT", "SLONG", "SRATIONAL", "SINGLE", "DOUBLE", "IFD"};
        F = new int[]{0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8, 1};
        G = new byte[]{65, 83, 67, 73, 73, 0, 0, 0};
        d[] dVarArr = {new d("NewSubfileType", 254, 4), new d("SubfileType", 255, 4), new d(256, "ImageWidth"), new d(257, "ImageLength"), new d("BitsPerSample", 258, 3), new d("Compression", 259, 3), new d("PhotometricInterpretation", 262, 3), new d("ImageDescription", 270, 2), new d("Make", 271, 2), new d("Model", 272, 2), new d(273, "StripOffsets"), new d("Orientation", 274, 3), new d("SamplesPerPixel", 277, 3), new d(278, "RowsPerStrip"), new d(279, "StripByteCounts"), new d("XResolution", 282, 5), new d("YResolution", 283, 5), new d("PlanarConfiguration", 284, 3), new d("ResolutionUnit", 296, 3), new d("TransferFunction", 301, 3), new d("Software", 305, 2), new d("DateTime", 306, 2), new d("Artist", 315, 2), new d("WhitePoint", 318, 5), new d("PrimaryChromaticities", 319, 5), new d("SubIFDPointer", 330, 4), new d("JPEGInterchangeFormat", 513, 4), new d("JPEGInterchangeFormatLength", 514, 4), new d("YCbCrCoefficients", 529, 5), new d("YCbCrSubSampling", 530, 3), new d("YCbCrPositioning", 531, 3), new d("ReferenceBlackWhite", 532, 5), new d("Copyright", 33432, 2), new d("ExifIFDPointer", 34665, 4), new d("GPSInfoIFDPointer", 34853, 4), new d("SensorTopBorder", 4, 4), new d("SensorLeftBorder", 5, 4), new d("SensorBottomBorder", 6, 4), new d("SensorRightBorder", 7, 4), new d("ISO", 23, 3), new d("JpgFromRaw", 46, 7), new d("Xmp", 700, 1)};
        d[] dVarArr2 = {new d("ExposureTime", 33434, 5), new d("FNumber", 33437, 5), new d("ExposureProgram", 34850, 3), new d("SpectralSensitivity", 34852, 2), new d("PhotographicSensitivity", 34855, 3), new d("OECF", 34856, 7), new d("SensitivityType", 34864, 3), new d("StandardOutputSensitivity", 34865, 4), new d("RecommendedExposureIndex", 34866, 4), new d("ISOSpeed", 34867, 4), new d("ISOSpeedLatitudeyyy", 34868, 4), new d("ISOSpeedLatitudezzz", 34869, 4), new d("ExifVersion", 36864, 2), new d("DateTimeOriginal", 36867, 2), new d("DateTimeDigitized", 36868, 2), new d("OffsetTime", 36880, 2), new d("OffsetTimeOriginal", 36881, 2), new d("OffsetTimeDigitized", 36882, 2), new d("ComponentsConfiguration", 37121, 7), new d("CompressedBitsPerPixel", 37122, 5), new d("ShutterSpeedValue", 37377, 10), new d("ApertureValue", 37378, 5), new d("BrightnessValue", 37379, 10), new d("ExposureBiasValue", 37380, 10), new d("MaxApertureValue", 37381, 5), new d("SubjectDistance", 37382, 5), new d("MeteringMode", 37383, 3), new d("LightSource", 37384, 3), new d("Flash", 37385, 3), new d("FocalLength", 37386, 5), new d("SubjectArea", 37396, 3), new d("MakerNote", 37500, 7), new d("UserComment", 37510, 7), new d("SubSecTime", 37520, 2), new d("SubSecTimeOriginal", 37521, 2), new d("SubSecTimeDigitized", 37522, 2), new d("FlashpixVersion", 40960, 7), new d("ColorSpace", 40961, 3), new d(40962, "PixelXDimension"), new d(40963, "PixelYDimension"), new d("RelatedSoundFile", 40964, 2), new d("InteroperabilityIFDPointer", 40965, 4), new d("FlashEnergy", 41483, 5), new d("SpatialFrequencyResponse", 41484, 7), new d("FocalPlaneXResolution", 41486, 5), new d("FocalPlaneYResolution", 41487, 5), new d("FocalPlaneResolutionUnit", 41488, 3), new d("SubjectLocation", 41492, 3), new d("ExposureIndex", 41493, 5), new d("SensingMethod", 41495, 3), new d("FileSource", 41728, 7), new d("SceneType", 41729, 7), new d("CFAPattern", 41730, 7), new d("CustomRendered", 41985, 3), new d("ExposureMode", 41986, 3), new d("WhiteBalance", 41987, 3), new d("DigitalZoomRatio", 41988, 5), new d("FocalLengthIn35mmFilm", 41989, 3), new d("SceneCaptureType", 41990, 3), new d("GainControl", 41991, 3), new d("Contrast", 41992, 3), new d("Saturation", 41993, 3), new d("Sharpness", 41994, 3), new d("DeviceSettingDescription", 41995, 7), new d("SubjectDistanceRange", 41996, 3), new d("ImageUniqueID", 42016, 2), new d("CameraOwnerName", 42032, 2), new d("BodySerialNumber", 42033, 2), new d("LensSpecification", 42034, 5), new d("LensMake", 42035, 2), new d("LensModel", 42036, 2), new d("Gamma", 42240, 5), new d("DNGVersion", 50706, 1), new d(50720, "DefaultCropSize")};
        d[] dVarArr3 = {new d("GPSVersionID", 0, 1), new d("GPSLatitudeRef", 1, 2), new d("GPSLatitude", 2, 5), new d("GPSLongitudeRef", 3, 2), new d("GPSLongitude", 4, 5), new d("GPSAltitudeRef", 5, 1), new d("GPSAltitude", 6, 5), new d("GPSTimeStamp", 7, 5), new d("GPSSatellites", 8, 2), new d("GPSStatus", 9, 2), new d("GPSMeasureMode", 10, 2), new d("GPSDOP", 11, 5), new d("GPSSpeedRef", 12, 2), new d("GPSSpeed", 13, 5), new d("GPSTrackRef", 14, 2), new d("GPSTrack", 15, 5), new d("GPSImgDirectionRef", 16, 2), new d("GPSImgDirection", 17, 5), new d("GPSMapDatum", 18, 2), new d("GPSDestLatitudeRef", 19, 2), new d("GPSDestLatitude", 20, 5), new d("GPSDestLongitudeRef", 21, 2), new d("GPSDestLongitude", 22, 5), new d("GPSDestBearingRef", 23, 2), new d("GPSDestBearing", 24, 5), new d("GPSDestDistanceRef", 25, 2), new d("GPSDestDistance", 26, 5), new d("GPSProcessingMethod", 27, 7), new d("GPSAreaInformation", 28, 7), new d("GPSDateStamp", 29, 2), new d("GPSDifferential", 30, 3), new d("GPSHPositioningError", 31, 5)};
        d[] dVarArr4 = {new d("InteroperabilityIndex", 1, 2)};
        d[] dVarArr5 = {new d("NewSubfileType", 254, 4), new d("SubfileType", 255, 4), new d(256, "ThumbnailImageWidth"), new d(257, "ThumbnailImageLength"), new d("BitsPerSample", 258, 3), new d("Compression", 259, 3), new d("PhotometricInterpretation", 262, 3), new d("ImageDescription", 270, 2), new d("Make", 271, 2), new d("Model", 272, 2), new d(273, "StripOffsets"), new d("ThumbnailOrientation", 274, 3), new d("SamplesPerPixel", 277, 3), new d(278, "RowsPerStrip"), new d(279, "StripByteCounts"), new d("XResolution", 282, 5), new d("YResolution", 283, 5), new d("PlanarConfiguration", 284, 3), new d("ResolutionUnit", 296, 3), new d("TransferFunction", 301, 3), new d("Software", 305, 2), new d("DateTime", 306, 2), new d("Artist", 315, 2), new d("WhitePoint", 318, 5), new d("PrimaryChromaticities", 319, 5), new d("SubIFDPointer", 330, 4), new d("JPEGInterchangeFormat", 513, 4), new d("JPEGInterchangeFormatLength", 514, 4), new d("YCbCrCoefficients", 529, 5), new d("YCbCrSubSampling", 530, 3), new d("YCbCrPositioning", 531, 3), new d("ReferenceBlackWhite", 532, 5), new d("Copyright", 33432, 2), new d("ExifIFDPointer", 34665, 4), new d("GPSInfoIFDPointer", 34853, 4), new d("DNGVersion", 50706, 1), new d(50720, "DefaultCropSize")};
        H = new d("StripOffsets", 273, 3);
        I = new d[][]{dVarArr, dVarArr2, dVarArr3, dVarArr4, dVarArr5, dVarArr, new d[]{new d("ThumbnailImage", 256, 7), new d("CameraSettingsIFDPointer", 8224, 4), new d("ImageProcessingIFDPointer", 8256, 4)}, new d[]{new d("PreviewImageStart", 257, 4), new d("PreviewImageLength", 258, 4)}, new d[]{new d("AspectFrame", 4371, 3)}, new d[]{new d("ColorSpace", 55, 3)}};
        J = new d[]{new d("SubIFDPointer", 330, 4), new d("ExifIFDPointer", 34665, 4), new d("GPSInfoIFDPointer", 34853, 4), new d("InteroperabilityIFDPointer", 40965, 4), new d("CameraSettingsIFDPointer", 8224, 1), new d("ImageProcessingIFDPointer", 8256, 1)};
        K = new HashMap[10];
        L = new HashMap[10];
        M = new HashSet<>(Arrays.asList("FNumber", "DigitalZoomRatio", "ExposureTime", "SubjectDistance", "GPSTimeStamp"));
        N = new HashMap<>();
        Charset forName = Charset.forName("US-ASCII");
        O = forName;
        P = "Exif\u0000\u0000".getBytes(forName);
        Q = "http://ns.adobe.com/xap/1.0/\u0000".getBytes(forName);
        new SimpleDateFormat("yyyy:MM:dd HH:mm:ss").setTimeZone(TimeZone.getTimeZone("UTC"));
        int i = 0;
        while (true) {
            d[][] dVarArr6 = I;
            if (i < dVarArr6.length) {
                K[i] = new HashMap<>();
                L[i] = new HashMap<>();
                for (d dVar : dVarArr6[i]) {
                    K[i].put(Integer.valueOf(dVar.a), dVar);
                    L[i].put(dVar.b, dVar);
                }
                i++;
            } else {
                HashMap<Integer, Integer> hashMap = N;
                d[] dVarArr7 = J;
                hashMap.put(Integer.valueOf(dVarArr7[0].a), 5);
                hashMap.put(Integer.valueOf(dVarArr7[1].a), 1);
                hashMap.put(Integer.valueOf(dVarArr7[2].a), 2);
                hashMap.put(Integer.valueOf(dVarArr7[3].a), 3);
                hashMap.put(Integer.valueOf(dVarArr7[4].a), 7);
                hashMap.put(Integer.valueOf(dVarArr7[5].a), 8);
                Pattern.compile(".*[1-9].*");
                Pattern.compile("^([0-9][0-9]):([0-9][0-9]):([0-9][0-9])$");
                return;
            }
        }
    }

    public a(InputStream inputStream) {
        d[][] dVarArr = I;
        this.d = new HashMap[dVarArr.length];
        this.e = new HashSet(dVarArr.length);
        this.f = ByteOrder.BIG_ENDIAN;
        boolean z2 = inputStream instanceof AssetManager.AssetInputStream;
        boolean z3 = m;
        if (z2) {
            this.b = (AssetManager.AssetInputStream) inputStream;
            this.a = null;
        } else {
            if (inputStream instanceof FileInputStream) {
                FileInputStream fileInputStream = (FileInputStream) inputStream;
                try {
                    Os.lseek(fileInputStream.getFD(), 0L, OsConstants.SEEK_CUR);
                    this.b = null;
                    this.a = fileInputStream.getFD();
                } catch (Exception unused) {
                    if (z3) {
                        Log.d("ExifInterface", "The file descriptor for the given input is not seekable");
                    }
                }
            }
            this.b = null;
            this.a = null;
        }
        for (int i = 0; i < dVarArr.length; i++) {
            try {
                try {
                    this.d[i] = new HashMap<>();
                } catch (IOException e) {
                    if (z3) {
                        Log.w("ExifInterface", "Invalid image: ExifInterface got an unsupported image format file(ExifInterface supports JPEG and some RAW image formats only) or a corrupted JPEG file to ExifInterface.", e);
                    }
                    a();
                    if (!z3) {
                        return;
                    }
                }
            } catch (Throwable th) {
                a();
                if (z3) {
                    r();
                }
                throw th;
            }
        }
        BufferedInputStream bufferedInputStream = new BufferedInputStream(inputStream, 5000);
        this.c = h(bufferedInputStream);
        b bVar = new b(bufferedInputStream);
        switch (this.c) {
            case 0:
            case 1:
            case 2:
            case 3:
            case 5:
            case 6:
            case 8:
            case 11:
                l(bVar);
                break;
            case 4:
                g(bVar, 0, 0);
                break;
            case 7:
                i(bVar);
                break;
            case 9:
                k(bVar);
                break;
            case 10:
                m(bVar);
                break;
            case 12:
                f(bVar);
                break;
            case 13:
                j(bVar);
                break;
            case 14:
                n(bVar);
                break;
        }
        v(bVar);
        a();
        if (!z3) {
            return;
        }
        r();
    }

    public static String b(byte[] bArr) {
        StringBuilder sb = new StringBuilder(bArr.length * 2);
        for (byte b : bArr) {
            sb.append(String.format("%02x", Byte.valueOf(b)));
        }
        return sb.toString();
    }

    /* JADX WARN: Multi-variable type inference failed */
    public static long[] c(Serializable serializable) {
        if (serializable instanceof int[]) {
            int[] iArr = (int[]) serializable;
            long[] jArr = new long[iArr.length];
            for (int i = 0; i < iArr.length; i++) {
                jArr[i] = iArr[i];
            }
            return jArr;
        }
        if (serializable instanceof long[]) {
            return (long[]) serializable;
        }
        return null;
    }

    public static ByteOrder s(b bVar) {
        short readShort = bVar.readShort();
        boolean z2 = m;
        if (readShort != 18761) {
            if (readShort == 19789) {
                if (z2) {
                    Log.d("ExifInterface", "readExifSegment: Byte Align MM");
                }
                return ByteOrder.BIG_ENDIAN;
            }
            throw new IOException("Invalid byte order: " + Integer.toHexString(readShort));
        }
        if (z2) {
            Log.d("ExifInterface", "readExifSegment: Byte Align II");
        }
        return ByteOrder.LITTLE_ENDIAN;
    }

    public final void a() {
        String d = d("DateTimeOriginal");
        HashMap<String, c>[] hashMapArr = this.d;
        if (d != null && d("DateTime") == null) {
            HashMap<String, c> hashMap = hashMapArr[0];
            byte[] bytes = d.concat("\u0000").getBytes(O);
            hashMap.put("DateTime", new c(2, bytes.length, 0, bytes));
        }
        if (d("ImageWidth") == null) {
            hashMapArr[0].put("ImageWidth", c.a(0L, this.f));
        }
        if (d("ImageLength") == null) {
            hashMapArr[0].put("ImageLength", c.a(0L, this.f));
        }
        if (d("Orientation") == null) {
            hashMapArr[0].put("Orientation", c.a(0L, this.f));
        }
        if (d("LightSource") == null) {
            hashMapArr[1].put("LightSource", c.a(0L, this.f));
        }
    }

    public final String d(String str) {
        c e = e(str);
        if (e != null) {
            if (!M.contains(str)) {
                return e.f(this.f);
            }
            if (str.equals("GPSTimeStamp")) {
                int i = e.a;
                if (i != 5 && i != 10) {
                    Log.w("ExifInterface", "GPS Timestamp format is not rational. format=" + i);
                    return null;
                }
                e[] eVarArr = (e[]) e.g(this.f);
                if (eVarArr != null && eVarArr.length == 3) {
                    e eVar = eVarArr[0];
                    Integer valueOf = Integer.valueOf((int) (((float) eVar.a) / ((float) eVar.b)));
                    e eVar2 = eVarArr[1];
                    Integer valueOf2 = Integer.valueOf((int) (((float) eVar2.a) / ((float) eVar2.b)));
                    e eVar3 = eVarArr[2];
                    return String.format("%02d:%02d:%02d", valueOf, valueOf2, Integer.valueOf((int) (((float) eVar3.a) / ((float) eVar3.b))));
                }
                Log.w("ExifInterface", "Invalid GPS Timestamp array. array=" + Arrays.toString(eVarArr));
                return null;
            }
            try {
                return Double.toString(e.d(this.f));
            } catch (NumberFormatException unused) {
            }
        }
        return null;
    }

    public final c e(String str) {
        if ("ISOSpeedRatings".equals(str)) {
            if (m) {
                Log.d("ExifInterface", "getExifAttribute: Replacing TAG_ISO_SPEED_RATINGS with TAG_PHOTOGRAPHIC_SENSITIVITY.");
            }
            str = "PhotographicSensitivity";
        }
        for (int i = 0; i < I.length; i++) {
            c cVar = this.d[i].get(str);
            if (cVar != null) {
                return cVar;
            }
        }
        return null;
    }

    public final void f(b bVar) {
        String str;
        String str2;
        String str3;
        int i;
        MediaMetadataRetriever mediaMetadataRetriever = new MediaMetadataRetriever();
        try {
            if (Build.VERSION.SDK_INT >= 23) {
                e.i(mediaMetadataRetriever, new a(bVar));
            } else {
                FileDescriptor fileDescriptor = this.a;
                if (fileDescriptor != null) {
                    mediaMetadataRetriever.setDataSource(fileDescriptor);
                } else {
                    mediaMetadataRetriever.release();
                    return;
                }
            }
            String extractMetadata = mediaMetadataRetriever.extractMetadata(33);
            String extractMetadata2 = mediaMetadataRetriever.extractMetadata(34);
            String extractMetadata3 = mediaMetadataRetriever.extractMetadata(26);
            String extractMetadata4 = mediaMetadataRetriever.extractMetadata(17);
            if ("yes".equals(extractMetadata3)) {
                str = mediaMetadataRetriever.extractMetadata(29);
                str2 = mediaMetadataRetriever.extractMetadata(30);
                str3 = mediaMetadataRetriever.extractMetadata(31);
            } else if ("yes".equals(extractMetadata4)) {
                str = mediaMetadataRetriever.extractMetadata(18);
                str2 = mediaMetadataRetriever.extractMetadata(19);
                str3 = mediaMetadataRetriever.extractMetadata(24);
            } else {
                str = null;
                str2 = null;
                str3 = null;
            }
            HashMap<String, c>[] hashMapArr = this.d;
            if (str != null) {
                hashMapArr[0].put("ImageWidth", c.c(Integer.parseInt(str), this.f));
            }
            if (str2 != null) {
                hashMapArr[0].put("ImageLength", c.c(Integer.parseInt(str2), this.f));
            }
            if (str3 != null) {
                int parseInt = Integer.parseInt(str3);
                if (parseInt != 90) {
                    if (parseInt != 180) {
                        if (parseInt != 270) {
                            i = 1;
                        } else {
                            i = 8;
                        }
                    } else {
                        i = 3;
                    }
                } else {
                    i = 6;
                }
                hashMapArr[0].put("Orientation", c.c(i, this.f));
            }
            if (extractMetadata != null && extractMetadata2 != null) {
                int parseInt2 = Integer.parseInt(extractMetadata);
                int parseInt3 = Integer.parseInt(extractMetadata2);
                if (parseInt3 > 6) {
                    bVar.c(parseInt2);
                    byte[] bArr = new byte[6];
                    if (bVar.read(bArr) == 6) {
                        int i2 = parseInt2 + 6;
                        int i3 = parseInt3 - 6;
                        if (Arrays.equals(bArr, P)) {
                            byte[] bArr2 = new byte[i3];
                            if (bVar.read(bArr2) == i3) {
                                this.h = i2;
                                t(bArr2, 0);
                            } else {
                                throw new IOException("Can't read exif");
                            }
                        } else {
                            throw new IOException("Invalid identifier");
                        }
                    } else {
                        throw new IOException("Can't read identifier");
                    }
                } else {
                    throw new IOException("Invalid exif length");
                }
            }
            if (m) {
                Log.d("ExifInterface", "Heif meta: " + str + "x" + str2 + ", rotation " + str3);
            }
            mediaMetadataRetriever.release();
        } catch (Throwable th) {
            mediaMetadataRetriever.release();
            throw th;
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:90:0x019e, code lost:
    
        r17.i = r16.f;
     */
    /* JADX WARN: Code restructure failed: missing block: B:91:0x01a2, code lost:
    
        return;
     */
    /* JADX WARN: Failed to find 'out' block for switch in B:30:0x00ad. Please report as an issue. */
    /* JADX WARN: Removed duplicated region for block: B:32:0x017f  */
    /* JADX WARN: Removed duplicated region for block: B:39:0x0192 A[SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:42:0x00b2 A[FALL_THROUGH] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final void g(b bVar, int i, int i2) {
        boolean z2 = m;
        if (z2) {
            Log.d("ExifInterface", "getJpegAttributes starting with: " + bVar);
        }
        bVar.i = ByteOrder.BIG_ENDIAN;
        bVar.c(i);
        byte readByte = bVar.readByte();
        byte b = -1;
        if (readByte == -1) {
            if (bVar.readByte() == -40) {
                int i3 = 2;
                int i4 = i + 2;
                while (true) {
                    byte readByte2 = bVar.readByte();
                    if (readByte2 == b) {
                        byte readByte3 = bVar.readByte();
                        if (z2) {
                            Log.d("ExifInterface", "Found JPEG segment indicator: " + Integer.toHexString(readByte3 & 255));
                        }
                        if (readByte3 != -39 && readByte3 != -38) {
                            int readUnsignedShort = bVar.readUnsignedShort();
                            int i5 = readUnsignedShort - 2;
                            int i6 = i4 + 4;
                            if (z2) {
                                Log.d("ExifInterface", "JPEG segment: " + Integer.toHexString(readByte3 & 255) + " (length: " + readUnsignedShort + ")");
                            }
                            if (i5 >= 0) {
                                HashMap<String, c>[] hashMapArr = this.d;
                                if (readByte3 != -31) {
                                    if (readByte3 != -2) {
                                        switch (readByte3) {
                                            default:
                                                switch (readByte3) {
                                                    default:
                                                        switch (readByte3) {
                                                            default:
                                                                switch (readByte3) {
                                                                }
                                                            case -55:
                                                            case -54:
                                                            case -53:
                                                                if (bVar.skipBytes(1) == 1) {
                                                                    hashMapArr[i2].put("ImageLength", c.a(bVar.readUnsignedShort(), this.f));
                                                                    hashMapArr[i2].put("ImageWidth", c.a(bVar.readUnsignedShort(), this.f));
                                                                    i5 = readUnsignedShort - 7;
                                                                    break;
                                                                } else {
                                                                    throw new IOException("Invalid SOFx");
                                                                }
                                                        }
                                                    case -59:
                                                    case -58:
                                                    case -57:
                                                        break;
                                                }
                                            case -64:
                                            case -63:
                                            case -62:
                                            case -61:
                                                break;
                                        }
                                        if (i5 < 0) {
                                            if (bVar.skipBytes(i5) == i5) {
                                                i4 = i6 + i5;
                                                i3 = 2;
                                                b = -1;
                                            } else {
                                                throw new IOException("Invalid JPEG segment");
                                            }
                                        } else {
                                            throw new IOException("Invalid length");
                                        }
                                    } else {
                                        byte[] bArr = new byte[i5];
                                        if (bVar.read(bArr) == i5) {
                                            if (d("UserComment") == null) {
                                                HashMap<String, c> hashMap = hashMapArr[1];
                                                Charset charset = O;
                                                byte[] bytes = new String(bArr, charset).concat("\u0000").getBytes(charset);
                                                hashMap.put("UserComment", new c(i3, bytes.length, 0, bytes));
                                            }
                                        } else {
                                            throw new IOException("Invalid exif");
                                        }
                                    }
                                } else {
                                    byte[] bArr2 = new byte[i5];
                                    bVar.readFully(bArr2);
                                    int i7 = i6 + i5;
                                    byte[] bArr3 = P;
                                    if (bArr3 != null && i5 >= bArr3.length) {
                                        for (int i8 = 0; i8 < bArr3.length; i8++) {
                                            if (bArr2[i8] == bArr3[i8]) {
                                            }
                                        }
                                        int length = i6 + bArr3.length;
                                        byte[] copyOfRange = Arrays.copyOfRange(bArr2, bArr3.length, i5);
                                        this.h = length;
                                        t(copyOfRange, i2);
                                        i6 = i7;
                                    }
                                    byte[] bArr4 = Q;
                                    if (bArr4 != null && i5 >= bArr4.length) {
                                        int i9 = 0;
                                        while (true) {
                                            if (i9 < bArr4.length) {
                                                if (bArr2[i9] == bArr4[i9]) {
                                                    i9++;
                                                }
                                            } else {
                                                int length2 = bArr4.length;
                                                byte[] copyOfRange2 = Arrays.copyOfRange(bArr2, bArr4.length, i5);
                                                if (d("Xmp") == null) {
                                                    hashMapArr[0].put("Xmp", new c(1, copyOfRange2.length, 0, copyOfRange2));
                                                }
                                            }
                                        }
                                    }
                                    i6 = i7;
                                }
                                i5 = 0;
                                if (i5 < 0) {
                                }
                            } else {
                                throw new IOException("Invalid length");
                            }
                        }
                    } else {
                        throw new IOException("Invalid marker:" + Integer.toHexString(readByte2 & 255));
                    }
                }
            } else {
                throw new IOException("Invalid marker: " + Integer.toHexString(readByte & 255));
            }
        } else {
            throw new IOException("Invalid marker: " + Integer.toHexString(readByte & 255));
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:151:0x00bf, code lost:
    
        if (r8 != null) goto L15;
     */
    /* JADX WARN: Removed duplicated region for block: B:32:0x00fc A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00fe A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:44:0x0134 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:45:0x0137  */
    /* JADX WARN: Type inference failed for: r8v0 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final int h(BufferedInputStream bufferedInputStream) {
        InputStream inputStream;
        b bVar;
        InputStream inputStream2;
        InputStream inputStream3;
        boolean z2;
        InputStream inputStream4;
        InputStream inputStream5;
        boolean z3;
        boolean z4;
        boolean z5;
        InputStream bVar2;
        long j;
        bufferedInputStream.mark(5000);
        byte[] bArr = new byte[5000];
        bufferedInputStream.read(bArr);
        bufferedInputStream.reset();
        int i = 0;
        while (true) {
            byte[] bArr2 = r;
            if (i >= bArr2.length) {
                return 4;
            }
            if (bArr[i] != bArr2[i]) {
                byte[] bytes = "FUJIFILMCCD-RAW".getBytes(Charset.defaultCharset());
                for (int i2 = 0; i2 < bytes.length; i2++) {
                    byte b = bArr[i2];
                    ?? r8 = bytes[i2];
                    try {
                        if (b != r8) {
                            try {
                                bVar = new b(bArr);
                                try {
                                    long readInt = bVar.readInt();
                                    byte[] bArr3 = new byte[4];
                                    bVar.read(bArr3);
                                    if (Arrays.equals(bArr3, s)) {
                                        if (readInt == 1) {
                                            readInt = bVar.readLong();
                                            j = 16;
                                            if (readInt < 16) {
                                            }
                                        } else {
                                            j = 8;
                                        }
                                        long j2 = 5000;
                                        if (readInt > j2) {
                                            readInt = j2;
                                        }
                                        long j3 = readInt - j;
                                        if (j3 >= 8) {
                                            byte[] bArr4 = new byte[4];
                                            boolean z6 = false;
                                            boolean z7 = false;
                                            for (long j4 = 0; j4 < j3 / 4 && bVar.read(bArr4) == 4; j4++) {
                                                if (j4 != 1) {
                                                    if (Arrays.equals(bArr4, t)) {
                                                        z6 = true;
                                                    } else if (Arrays.equals(bArr4, u)) {
                                                        z7 = true;
                                                    }
                                                    if (z6 && z7) {
                                                        bVar.close();
                                                        return 12;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } catch (Exception e) {
                                    e = e;
                                    if (m) {
                                        Log.d("ExifInterface", "Exception parsing HEIF file type box.", e);
                                    }
                                }
                            } catch (Exception e2) {
                                e = e2;
                                bVar = null;
                            } catch (Throwable th) {
                                th = th;
                                inputStream = null;
                                if (inputStream != null) {
                                    inputStream.close();
                                }
                                throw th;
                            }
                            bVar.close();
                            try {
                                inputStream3 = new b(bArr);
                                try {
                                    ByteOrder s2 = s(inputStream3);
                                    this.f = s2;
                                    ((b) inputStream3).i = s2;
                                    short readShort = inputStream3.readShort();
                                    if (readShort != 20306 && readShort != 21330) {
                                        z2 = false;
                                    } else {
                                        z2 = true;
                                    }
                                    inputStream3.close();
                                } catch (Exception unused) {
                                    if (inputStream3 != null) {
                                        inputStream3.close();
                                    }
                                    z2 = false;
                                    if (!z2) {
                                    }
                                } catch (Throwable th2) {
                                    th = th2;
                                    inputStream2 = inputStream3;
                                    if (inputStream2 != null) {
                                        inputStream2.close();
                                    }
                                    throw th;
                                }
                            } catch (Exception unused2) {
                                inputStream3 = null;
                            } catch (Throwable th3) {
                                th = th3;
                                inputStream2 = null;
                            }
                            if (!z2) {
                                return 7;
                            }
                            try {
                                bVar2 = new b(bArr);
                            } catch (Exception unused3) {
                                inputStream5 = null;
                            } catch (Throwable th4) {
                                th = th4;
                                inputStream4 = null;
                            }
                            try {
                                ByteOrder s3 = s(bVar2);
                                this.f = s3;
                                ((b) bVar2).i = s3;
                                if (bVar2.readShort() == 85) {
                                    z3 = true;
                                } else {
                                    z3 = false;
                                }
                                bVar2.close();
                            } catch (Exception unused4) {
                                inputStream5 = bVar2;
                                if (inputStream5 != null) {
                                    inputStream5.close();
                                }
                                z3 = false;
                                if (!z3) {
                                }
                            } catch (Throwable th5) {
                                th = th5;
                                inputStream4 = bVar2;
                                if (inputStream4 != null) {
                                    inputStream4.close();
                                }
                                throw th;
                            }
                            if (!z3) {
                                return 10;
                            }
                            int i3 = 0;
                            while (true) {
                                byte[] bArr5 = x;
                                if (i3 < bArr5.length) {
                                    if (bArr[i3] != bArr5[i3]) {
                                        z4 = false;
                                        break;
                                    }
                                    i3++;
                                } else {
                                    z4 = true;
                                    break;
                                }
                            }
                            if (z4) {
                                return 13;
                            }
                            int i4 = 0;
                            while (true) {
                                byte[] bArr6 = B;
                                if (i4 < bArr6.length) {
                                    if (bArr[i4] != bArr6[i4]) {
                                        break;
                                    }
                                    i4++;
                                } else {
                                    int i5 = 0;
                                    while (true) {
                                        byte[] bArr7 = C;
                                        if (i5 < bArr7.length) {
                                            if (bArr[bArr6.length + i5 + 4] != bArr7[i5]) {
                                                break;
                                            }
                                            i5++;
                                        } else {
                                            z5 = true;
                                            break;
                                        }
                                    }
                                }
                            }
                            z5 = false;
                            if (!z5) {
                                return 0;
                            }
                            return 14;
                        }
                    } catch (Throwable th6) {
                        th = th6;
                        inputStream = r8;
                    }
                }
                return 9;
            }
            i++;
        }
    }

    public final void i(b bVar) {
        int i;
        int i2;
        l(bVar);
        HashMap<String, c>[] hashMapArr = this.d;
        c cVar = hashMapArr[1].get("MakerNote");
        if (cVar != null) {
            b bVar2 = new b(cVar.c);
            bVar2.i = this.f;
            byte[] bArr = v;
            byte[] bArr2 = new byte[bArr.length];
            bVar2.readFully(bArr2);
            bVar2.c(0L);
            byte[] bArr3 = w;
            byte[] bArr4 = new byte[bArr3.length];
            bVar2.readFully(bArr4);
            if (Arrays.equals(bArr2, bArr)) {
                bVar2.c(8L);
            } else if (Arrays.equals(bArr4, bArr3)) {
                bVar2.c(12L);
            }
            u(bVar2, 6);
            c cVar2 = hashMapArr[7].get("PreviewImageStart");
            c cVar3 = hashMapArr[7].get("PreviewImageLength");
            if (cVar2 != null && cVar3 != null) {
                hashMapArr[5].put("JPEGInterchangeFormat", cVar2);
                hashMapArr[5].put("JPEGInterchangeFormatLength", cVar3);
            }
            c cVar4 = hashMapArr[8].get("AspectFrame");
            if (cVar4 != null) {
                int[] iArr = (int[]) cVar4.g(this.f);
                if (iArr != null && iArr.length == 4) {
                    int i3 = iArr[2];
                    int i4 = iArr[0];
                    if (i3 > i4 && (i = iArr[3]) > (i2 = iArr[1])) {
                        int i5 = (i3 - i4) + 1;
                        int i6 = (i - i2) + 1;
                        if (i5 < i6) {
                            int i7 = i5 + i6;
                            i6 = i7 - i6;
                            i5 = i7 - i6;
                        }
                        c c = c.c(i5, this.f);
                        c c2 = c.c(i6, this.f);
                        hashMapArr[0].put("ImageWidth", c);
                        hashMapArr[0].put("ImageLength", c2);
                        return;
                    }
                    return;
                }
                Log.w("ExifInterface", "Invalid aspect frame values. frame=" + Arrays.toString(iArr));
            }
        }
    }

    public final void j(b bVar) {
        if (m) {
            Log.d("ExifInterface", "getPngAttributes starting with: " + bVar);
        }
        bVar.i = ByteOrder.BIG_ENDIAN;
        byte[] bArr = x;
        bVar.skipBytes(bArr.length);
        int length = bArr.length;
        while (true) {
            try {
                int readInt = bVar.readInt();
                byte[] bArr2 = new byte[4];
                if (bVar.read(bArr2) == 4) {
                    int i = length + 8;
                    if (i == 16 && !Arrays.equals(bArr2, z)) {
                        throw new IOException("Encountered invalid PNG file--IHDR chunk should appearas the first chunk");
                    }
                    if (!Arrays.equals(bArr2, A)) {
                        if (Arrays.equals(bArr2, y)) {
                            byte[] bArr3 = new byte[readInt];
                            if (bVar.read(bArr3) == readInt) {
                                int readInt2 = bVar.readInt();
                                CRC32 crc32 = new CRC32();
                                crc32.update(bArr2);
                                crc32.update(bArr3);
                                if (((int) crc32.getValue()) == readInt2) {
                                    this.h = i;
                                    t(bArr3, 0);
                                    y();
                                    return;
                                } else {
                                    throw new IOException("Encountered invalid CRC value for PNG-EXIF chunk.\n recorded CRC value: " + readInt2 + ", calculated CRC value: " + crc32.getValue());
                                }
                            }
                            throw new IOException("Failed to read given length for given PNG chunk type: " + b(bArr2));
                        }
                        int i2 = readInt + 4;
                        bVar.skipBytes(i2);
                        length = i + i2;
                    } else {
                        return;
                    }
                } else {
                    throw new IOException("Encountered invalid length while parsing PNG chunktype");
                }
            } catch (EOFException unused) {
                throw new IOException("Encountered corrupt PNG file.");
            }
        }
    }

    public final void k(b bVar) {
        bVar.skipBytes(84);
        byte[] bArr = new byte[4];
        byte[] bArr2 = new byte[4];
        bVar.read(bArr);
        bVar.skipBytes(4);
        bVar.read(bArr2);
        int i = ByteBuffer.wrap(bArr).getInt();
        int i2 = ByteBuffer.wrap(bArr2).getInt();
        g(bVar, i, 5);
        bVar.c(i2);
        bVar.i = ByteOrder.BIG_ENDIAN;
        int readInt = bVar.readInt();
        boolean z2 = m;
        if (z2) {
            Log.d("ExifInterface", "numberOfDirectoryEntry: " + readInt);
        }
        for (int i3 = 0; i3 < readInt; i3++) {
            int readUnsignedShort = bVar.readUnsignedShort();
            int readUnsignedShort2 = bVar.readUnsignedShort();
            if (readUnsignedShort == H.a) {
                short readShort = bVar.readShort();
                short readShort2 = bVar.readShort();
                c c = c.c(readShort, this.f);
                c c2 = c.c(readShort2, this.f);
                HashMap<String, c>[] hashMapArr = this.d;
                hashMapArr[0].put("ImageLength", c);
                hashMapArr[0].put("ImageWidth", c2);
                if (z2) {
                    Log.d("ExifInterface", "Updated to length: " + ((int) readShort) + ", width: " + ((int) readShort2));
                    return;
                }
                return;
            }
            bVar.skipBytes(readUnsignedShort2);
        }
    }

    public final void l(b bVar) {
        q(bVar, bVar.h.available());
        u(bVar, 0);
        x(bVar, 0);
        x(bVar, 5);
        x(bVar, 4);
        y();
        if (this.c == 8) {
            HashMap<String, c>[] hashMapArr = this.d;
            c cVar = hashMapArr[1].get("MakerNote");
            if (cVar != null) {
                b bVar2 = new b(cVar.c);
                bVar2.i = this.f;
                bVar2.c(6L);
                u(bVar2, 9);
                c cVar2 = hashMapArr[9].get("ColorSpace");
                if (cVar2 != null) {
                    hashMapArr[1].put("ColorSpace", cVar2);
                }
            }
        }
    }

    public final void m(b bVar) {
        l(bVar);
        HashMap<String, c>[] hashMapArr = this.d;
        if (hashMapArr[0].get("JpgFromRaw") != null) {
            g(bVar, this.l, 5);
        }
        c cVar = hashMapArr[0].get("ISO");
        c cVar2 = hashMapArr[1].get("PhotographicSensitivity");
        if (cVar != null && cVar2 == null) {
            hashMapArr[1].put("PhotographicSensitivity", cVar);
        }
    }

    public final void n(b bVar) {
        if (m) {
            Log.d("ExifInterface", "getWebpAttributes starting with: " + bVar);
        }
        bVar.i = ByteOrder.LITTLE_ENDIAN;
        bVar.skipBytes(B.length);
        int readInt = bVar.readInt() + 8;
        int skipBytes = bVar.skipBytes(C.length) + 8;
        while (true) {
            try {
                byte[] bArr = new byte[4];
                if (bVar.read(bArr) == 4) {
                    int readInt2 = bVar.readInt();
                    int i = skipBytes + 8;
                    if (Arrays.equals(D, bArr)) {
                        byte[] bArr2 = new byte[readInt2];
                        if (bVar.read(bArr2) == readInt2) {
                            this.h = i;
                            t(bArr2, 0);
                            this.h = i;
                            return;
                        } else {
                            throw new IOException("Failed to read given length for given PNG chunk type: " + b(bArr));
                        }
                    }
                    if (readInt2 % 2 == 1) {
                        readInt2++;
                    }
                    int i2 = i + readInt2;
                    if (i2 == readInt) {
                        return;
                    }
                    if (i2 <= readInt) {
                        int skipBytes2 = bVar.skipBytes(readInt2);
                        if (skipBytes2 == readInt2) {
                            skipBytes = i + skipBytes2;
                        } else {
                            throw new IOException("Encountered WebP file with invalid chunk size");
                        }
                    } else {
                        throw new IOException("Encountered WebP file with invalid chunk size");
                    }
                } else {
                    throw new IOException("Encountered invalid length while parsing WebP chunktype");
                }
            } catch (EOFException unused) {
                throw new IOException("Encountered corrupt WebP file.");
            }
        }
    }

    public final void o(b bVar, HashMap hashMap) {
        c cVar = (c) hashMap.get("JPEGInterchangeFormat");
        c cVar2 = (c) hashMap.get("JPEGInterchangeFormatLength");
        if (cVar != null && cVar2 != null) {
            int e = cVar.e(this.f);
            int e2 = cVar2.e(this.f);
            if (this.c == 7) {
                e += this.i;
            }
            int min = Math.min(e2, bVar.j - e);
            if (e > 0 && min > 0) {
                int i = this.h + e;
                if (this.b == null && this.a == null) {
                    bVar.c(i);
                    bVar.readFully(new byte[min]);
                }
            }
            if (m) {
                Log.d("ExifInterface", "Setting thumbnail attributes with offset: " + e + ", length: " + min);
            }
        }
    }

    public final boolean p(HashMap hashMap) {
        c cVar = (c) hashMap.get("ImageLength");
        c cVar2 = (c) hashMap.get("ImageWidth");
        if (cVar != null && cVar2 != null) {
            int e = cVar.e(this.f);
            int e2 = cVar2.e(this.f);
            if (e <= 512 && e2 <= 512) {
                return true;
            }
            return false;
        }
        return false;
    }

    public final void q(b bVar, int i) {
        ByteOrder s2 = s(bVar);
        this.f = s2;
        bVar.i = s2;
        int readUnsignedShort = bVar.readUnsignedShort();
        int i2 = this.c;
        if (i2 != 7 && i2 != 10 && readUnsignedShort != 42) {
            throw new IOException("Invalid start code: " + Integer.toHexString(readUnsignedShort));
        }
        int readInt = bVar.readInt();
        if (readInt >= 8 && readInt < i) {
            int i3 = readInt - 8;
            if (i3 > 0 && bVar.skipBytes(i3) != i3) {
                throw new IOException(n.i(i3, "Couldn't jump to first Ifd: "));
            }
            return;
        }
        throw new IOException(n.i(readInt, "Invalid first Ifd offset: "));
    }

    public final void r() {
        int i = 0;
        while (true) {
            HashMap<String, c>[] hashMapArr = this.d;
            if (i < hashMapArr.length) {
                Log.d("ExifInterface", "The size of tag group[" + i + "]: " + hashMapArr[i].size());
                for (Map.Entry<String, c> entry : hashMapArr[i].entrySet()) {
                    c value = entry.getValue();
                    Log.d("ExifInterface", "tagName: " + entry.getKey() + ", tagType: " + value.toString() + ", tagValue: '" + value.f(this.f) + "'");
                }
                i++;
            } else {
                return;
            }
        }
    }

    public final void t(byte[] bArr, int i) {
        b bVar = new b(bArr);
        q(bVar, bArr.length);
        u(bVar, i);
    }

    /* JADX WARN: Removed duplicated region for block: B:28:0x016d  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x0178  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x02a6  */
    /* JADX WARN: Removed duplicated region for block: B:75:0x0306  */
    /* JADX WARN: Removed duplicated region for block: B:76:0x02bf  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public final void u(b bVar, int i) {
        HashMap<String, c>[] hashMapArr;
        short s2;
        HashSet hashSet;
        int i2;
        int i3;
        int i4;
        long j;
        boolean z2;
        int i5;
        int i6;
        long j2;
        int i7;
        int i8;
        int i9;
        d dVar;
        long j3;
        HashSet hashSet2;
        int readUnsignedShort;
        long j4;
        HashSet hashSet3;
        long j5;
        String str;
        int i10 = i;
        Integer valueOf = Integer.valueOf(bVar.k);
        HashSet hashSet4 = this.e;
        hashSet4.add(valueOf);
        int i11 = bVar.k + 2;
        int i12 = bVar.j;
        if (i11 > i12) {
            return;
        }
        short readShort = bVar.readShort();
        boolean z3 = m;
        if (z3) {
            Log.d("ExifInterface", "numberOfDirectoryEntry: " + ((int) readShort));
        }
        if ((readShort * 12) + bVar.k <= i12 && readShort > 0) {
            short s3 = 0;
            while (true) {
                hashMapArr = this.d;
                if (s3 >= readShort) {
                    break;
                }
                int readUnsignedShort2 = bVar.readUnsignedShort();
                int readUnsignedShort3 = bVar.readUnsignedShort();
                int readInt = bVar.readInt();
                long j6 = bVar.k + 4;
                short s4 = readShort;
                d dVar2 = K[i10].get(Integer.valueOf(readUnsignedShort2));
                if (z3) {
                    Integer valueOf2 = Integer.valueOf(i);
                    Integer valueOf3 = Integer.valueOf(readUnsignedShort2);
                    s2 = s3;
                    if (dVar2 != null) {
                        str = dVar2.b;
                    } else {
                        str = null;
                    }
                    hashSet = hashSet4;
                    i2 = i12;
                    Log.d("ExifInterface", String.format("ifdType: %d, tagNumber: %d, tagName: %s, dataFormat: %d, numberOfComponents: %d", valueOf2, valueOf3, str, Integer.valueOf(readUnsignedShort3), Integer.valueOf(readInt)));
                } else {
                    s2 = s3;
                    hashSet = hashSet4;
                    i2 = i12;
                }
                if (dVar2 == null) {
                    if (z3) {
                        Log.d("ExifInterface", "Skip the tag entry since tag number is not defined: " + readUnsignedShort2);
                    }
                } else {
                    if (readUnsignedShort3 > 0) {
                        if (readUnsignedShort3 < F.length) {
                            int i13 = dVar2.c;
                            if (i13 != 7 && readUnsignedShort3 != 7 && i13 != readUnsignedShort3 && (i5 = dVar2.d) != readUnsignedShort3 && (((i13 != 4 && i5 != 4) || readUnsignedShort3 != 3) && ((i13 != 9 && i5 != 9) || readUnsignedShort3 != 8))) {
                                if ((i13 != 12 && i5 != 12) || readUnsignedShort3 != 11) {
                                    if (z3) {
                                        Log.d("ExifInterface", "Skip the tag entry since data format (" + E[readUnsignedShort3] + ") is unexpected for tag: " + dVar2.b);
                                    }
                                }
                            }
                            if (readUnsignedShort3 == 7) {
                                i4 = readUnsignedShort2;
                                readUnsignedShort3 = i13;
                            } else {
                                i4 = readUnsignedShort2;
                            }
                            i3 = i4;
                            j = readInt * r9[readUnsignedShort3];
                            if (j >= 0 && j <= 2147483647L) {
                                z2 = true;
                                if (z2) {
                                }
                                s3 = (short) (s2 + 1);
                                hashSet4 = hashSet2;
                                i12 = i9;
                                readShort = s4;
                                i10 = i;
                            } else {
                                if (z3) {
                                    Log.d("ExifInterface", "Skip the tag entry since the number of components is invalid: " + readInt);
                                }
                                z2 = false;
                                if (z2) {
                                    bVar.c(j6);
                                    hashSet2 = hashSet;
                                    i9 = i2;
                                } else {
                                    if (j > 4) {
                                        int readInt2 = bVar.readInt();
                                        i6 = readUnsignedShort3;
                                        if (z3) {
                                            i8 = i3;
                                            Log.d("ExifInterface", "seek to data offset: " + readInt2);
                                        } else {
                                            i8 = i3;
                                        }
                                        int i14 = this.c;
                                        if (i14 == 7) {
                                            if ("MakerNote".equals(dVar2.b)) {
                                                this.i = readInt2;
                                            } else if (i10 == 6 && "ThumbnailImage".equals(dVar2.b)) {
                                                this.j = readInt2;
                                                this.k = readInt;
                                                c c = c.c(6, this.f);
                                                i7 = readInt;
                                                c a = c.a(this.j, this.f);
                                                j5 = j6;
                                                c a2 = c.a(this.k, this.f);
                                                hashMapArr[4].put("Compression", c);
                                                hashMapArr[4].put("JPEGInterchangeFormat", a);
                                                hashMapArr[4].put("JPEGInterchangeFormatLength", a2);
                                            }
                                            j5 = j6;
                                            i7 = readInt;
                                        } else {
                                            j5 = j6;
                                            i7 = readInt;
                                            if (i14 == 10 && "JpgFromRaw".equals(dVar2.b)) {
                                                this.l = readInt2;
                                            }
                                        }
                                        long j7 = readInt2;
                                        dVar = dVar2;
                                        j2 = j;
                                        i9 = i2;
                                        if (j7 + j <= i9) {
                                            bVar.c(j7);
                                            j6 = j5;
                                        } else {
                                            if (z3) {
                                                Log.d("ExifInterface", "Skip the tag entry since data offset is invalid: " + readInt2);
                                            }
                                            bVar.c(j5);
                                            hashSet2 = hashSet;
                                        }
                                    } else {
                                        i6 = readUnsignedShort3;
                                        j2 = j;
                                        i7 = readInt;
                                        i8 = i3;
                                        i9 = i2;
                                        dVar = dVar2;
                                    }
                                    Integer num = N.get(Integer.valueOf(i8));
                                    if (z3) {
                                        StringBuilder sb = new StringBuilder("nextIfdType: ");
                                        sb.append(num);
                                        sb.append(" byteCount: ");
                                        j3 = j2;
                                        sb.append(j3);
                                        Log.d("ExifInterface", sb.toString());
                                    } else {
                                        j3 = j2;
                                    }
                                    if (num != null) {
                                        int i15 = i6;
                                        if (i15 != 3) {
                                            if (i15 != 4) {
                                                if (i15 != 8) {
                                                    if (i15 != 9 && i15 != 13) {
                                                        j4 = -1;
                                                    } else {
                                                        readUnsignedShort = bVar.readInt();
                                                    }
                                                } else {
                                                    readUnsignedShort = bVar.readShort();
                                                }
                                            } else {
                                                j4 = bVar.readInt() & 4294967295L;
                                            }
                                            if (!z3) {
                                                Log.d("ExifInterface", String.format("Offset: %d, tagName: %s", Long.valueOf(j4), dVar.b));
                                            }
                                            if (j4 <= 0 && j4 < i9) {
                                                hashSet3 = hashSet;
                                                if (!hashSet3.contains(Integer.valueOf((int) j4))) {
                                                    bVar.c(j4);
                                                    u(bVar, num.intValue());
                                                } else if (z3) {
                                                    Log.d("ExifInterface", "Skip jump into the IFD since it has already been read: IfdType " + num + " (at " + j4 + ")");
                                                }
                                            } else {
                                                hashSet3 = hashSet;
                                                if (z3) {
                                                    Log.d("ExifInterface", "Skip jump into the IFD since its offset is invalid: " + j4);
                                                }
                                            }
                                            bVar.c(j6);
                                            hashSet2 = hashSet3;
                                        } else {
                                            readUnsignedShort = bVar.readUnsignedShort();
                                        }
                                        j4 = readUnsignedShort;
                                        if (!z3) {
                                        }
                                        if (j4 <= 0) {
                                        }
                                        hashSet3 = hashSet;
                                        if (z3) {
                                        }
                                        bVar.c(j6);
                                        hashSet2 = hashSet3;
                                    } else {
                                        hashSet2 = hashSet;
                                        byte[] bArr = new byte[(int) j3];
                                        bVar.readFully(bArr);
                                        c cVar = new c(i6, i7, 0, bArr);
                                        hashMapArr[i].put(dVar.b, cVar);
                                        String str2 = dVar.b;
                                        if ("DNGVersion".equals(str2)) {
                                            this.c = 3;
                                        }
                                        if ((("Make".equals(str2) || "Model".equals(str2)) && cVar.f(this.f).contains("PENTAX")) || ("Compression".equals(str2) && cVar.e(this.f) == 65535)) {
                                            this.c = 8;
                                        }
                                        if (bVar.k != j6) {
                                            bVar.c(j6);
                                        }
                                        s3 = (short) (s2 + 1);
                                        hashSet4 = hashSet2;
                                        i12 = i9;
                                        readShort = s4;
                                        i10 = i;
                                    }
                                }
                                s3 = (short) (s2 + 1);
                                hashSet4 = hashSet2;
                                i12 = i9;
                                readShort = s4;
                                i10 = i;
                            }
                        }
                    }
                    i3 = readUnsignedShort2;
                    if (z3) {
                        Log.d("ExifInterface", "Skip the tag entry since data format is invalid: " + readUnsignedShort3);
                    }
                    j = 0;
                    z2 = false;
                    if (z2) {
                    }
                    s3 = (short) (s2 + 1);
                    hashSet4 = hashSet2;
                    i12 = i9;
                    readShort = s4;
                    i10 = i;
                }
                i3 = readUnsignedShort2;
                j = 0;
                z2 = false;
                if (z2) {
                }
                s3 = (short) (s2 + 1);
                hashSet4 = hashSet2;
                i12 = i9;
                readShort = s4;
                i10 = i;
            }
            HashSet hashSet5 = hashSet4;
            int i16 = i12;
            if (bVar.k + 4 <= i16) {
                int readInt3 = bVar.readInt();
                if (z3) {
                    Log.d("ExifInterface", String.format("nextIfdOffset: %d", Integer.valueOf(readInt3)));
                }
                long j8 = readInt3;
                if (j8 > 0 && readInt3 < i16) {
                    if (!hashSet5.contains(Integer.valueOf(readInt3))) {
                        bVar.c(j8);
                        if (hashMapArr[4].isEmpty()) {
                            u(bVar, 4);
                            return;
                        } else {
                            if (hashMapArr[5].isEmpty()) {
                                u(bVar, 5);
                                return;
                            }
                            return;
                        }
                    }
                    if (z3) {
                        Log.d("ExifInterface", "Stop reading file since re-reading an IFD may cause an infinite loop: " + readInt3);
                        return;
                    }
                    return;
                }
                if (z3) {
                    Log.d("ExifInterface", "Stop reading file since a wrong offset may cause an infinite loop: " + readInt3);
                }
            }
        }
    }

    public final void v(b bVar) {
        c cVar;
        int e;
        HashMap<String, c> hashMap = this.d[4];
        c cVar2 = hashMap.get("Compression");
        if (cVar2 != null) {
            int e2 = cVar2.e(this.f);
            if (e2 != 1) {
                if (e2 != 6) {
                    if (e2 != 7) {
                        return;
                    }
                } else {
                    o(bVar, hashMap);
                    return;
                }
            }
            c cVar3 = hashMap.get("BitsPerSample");
            if (cVar3 != null) {
                int[] iArr = (int[]) cVar3.g(this.f);
                int[] iArr2 = p;
                if (Arrays.equals(iArr2, iArr) || (this.c == 3 && (cVar = hashMap.get("PhotometricInterpretation")) != null && (((e = cVar.e(this.f)) == 1 && Arrays.equals(iArr, q)) || (e == 6 && Arrays.equals(iArr, iArr2))))) {
                    c cVar4 = hashMap.get("StripOffsets");
                    c cVar5 = hashMap.get("StripByteCounts");
                    if (cVar4 != null && cVar5 != null) {
                        long[] c = c(cVar4.g(this.f));
                        long[] c2 = c(cVar5.g(this.f));
                        if (c != null && c.length != 0) {
                            if (c2 != null && c2.length != 0) {
                                if (c.length != c2.length) {
                                    Log.w("ExifInterface", "stripOffsets and stripByteCounts should have same length.");
                                    return;
                                }
                                long j = 0;
                                for (long j2 : c2) {
                                    j += j2;
                                }
                                byte[] bArr = new byte[(int) j];
                                this.g = true;
                                int i = 0;
                                int i2 = 0;
                                for (int i3 = 0; i3 < c.length; i3++) {
                                    int i4 = (int) c[i3];
                                    int i5 = (int) c2[i3];
                                    if (i3 < c.length - 1 && i4 + i5 != c[i3 + 1]) {
                                        this.g = false;
                                    }
                                    int i6 = i4 - i;
                                    if (i6 < 0) {
                                        Log.d("ExifInterface", "Invalid strip offset value");
                                    }
                                    bVar.c(i6);
                                    int i7 = i + i6;
                                    byte[] bArr2 = new byte[i5];
                                    bVar.read(bArr2);
                                    i = i7 + i5;
                                    System.arraycopy(bArr2, 0, bArr, i2, i5);
                                    i2 += i5;
                                }
                                if (this.g) {
                                    long j3 = c[0];
                                    return;
                                }
                                return;
                            }
                            Log.w("ExifInterface", "stripByteCounts should not be null or have zero length.");
                            return;
                        }
                        Log.w("ExifInterface", "stripOffsets should not be null or have zero length.");
                        return;
                    }
                    return;
                }
            }
            if (m) {
                Log.d("ExifInterface", "Unsupported data type value");
                return;
            }
            return;
        }
        o(bVar, hashMap);
    }

    public final void w(int i, int i2) {
        HashMap<String, c>[] hashMapArr = this.d;
        boolean isEmpty = hashMapArr[i].isEmpty();
        boolean z2 = m;
        if (!isEmpty && !hashMapArr[i2].isEmpty()) {
            c cVar = hashMapArr[i].get("ImageLength");
            c cVar2 = hashMapArr[i].get("ImageWidth");
            c cVar3 = hashMapArr[i2].get("ImageLength");
            c cVar4 = hashMapArr[i2].get("ImageWidth");
            if (cVar != null && cVar2 != null) {
                if (cVar3 != null && cVar4 != null) {
                    int e = cVar.e(this.f);
                    int e2 = cVar2.e(this.f);
                    int e3 = cVar3.e(this.f);
                    int e4 = cVar4.e(this.f);
                    if (e < e3 && e2 < e4) {
                        HashMap<String, c> hashMap = hashMapArr[i];
                        hashMapArr[i] = hashMapArr[i2];
                        hashMapArr[i2] = hashMap;
                        return;
                    }
                    return;
                }
                if (z2) {
                    Log.d("ExifInterface", "Second image does not contain valid size information");
                    return;
                }
                return;
            }
            if (z2) {
                Log.d("ExifInterface", "First image does not contain valid size information");
                return;
            }
            return;
        }
        if (z2) {
            Log.d("ExifInterface", "Cannot perform swap since only one image data exists");
        }
    }

    public final void x(b bVar, int i) {
        c cVar;
        c c;
        c c2;
        HashMap<String, c>[] hashMapArr = this.d;
        c cVar2 = hashMapArr[i].get("DefaultCropSize");
        c cVar3 = hashMapArr[i].get("SensorTopBorder");
        c cVar4 = hashMapArr[i].get("SensorLeftBorder");
        c cVar5 = hashMapArr[i].get("SensorBottomBorder");
        c cVar6 = hashMapArr[i].get("SensorRightBorder");
        if (cVar2 != null) {
            if (cVar2.a == 5) {
                e[] eVarArr = (e[]) cVar2.g(this.f);
                if (eVarArr != null && eVarArr.length == 2) {
                    c = c.b(eVarArr[0], this.f);
                    c2 = c.b(eVarArr[1], this.f);
                } else {
                    Log.w("ExifInterface", "Invalid crop size values. cropSize=" + Arrays.toString(eVarArr));
                    return;
                }
            } else {
                int[] iArr = (int[]) cVar2.g(this.f);
                if (iArr != null && iArr.length == 2) {
                    c = c.c(iArr[0], this.f);
                    c2 = c.c(iArr[1], this.f);
                } else {
                    Log.w("ExifInterface", "Invalid crop size values. cropSize=" + Arrays.toString(iArr));
                    return;
                }
            }
            hashMapArr[i].put("ImageWidth", c);
            hashMapArr[i].put("ImageLength", c2);
            return;
        }
        if (cVar3 != null && cVar4 != null && cVar5 != null && cVar6 != null) {
            int e = cVar3.e(this.f);
            int e2 = cVar5.e(this.f);
            int e3 = cVar6.e(this.f);
            int e4 = cVar4.e(this.f);
            if (e2 > e && e3 > e4) {
                c c3 = c.c(e2 - e, this.f);
                c c4 = c.c(e3 - e4, this.f);
                hashMapArr[i].put("ImageLength", c3);
                hashMapArr[i].put("ImageWidth", c4);
                return;
            }
            return;
        }
        c cVar7 = hashMapArr[i].get("ImageLength");
        c cVar8 = hashMapArr[i].get("ImageWidth");
        if ((cVar7 == null || cVar8 == null) && (cVar = hashMapArr[i].get("JPEGInterchangeFormat")) != null) {
            g(bVar, cVar.e(this.f), i);
        }
    }

    public final void y() {
        w(0, 5);
        w(0, 4);
        w(5, 4);
        HashMap<String, c>[] hashMapArr = this.d;
        c cVar = hashMapArr[1].get("PixelXDimension");
        c cVar2 = hashMapArr[1].get("PixelYDimension");
        if (cVar != null && cVar2 != null) {
            hashMapArr[0].put("ImageWidth", cVar);
            hashMapArr[0].put("ImageLength", cVar2);
        }
        if (hashMapArr[4].isEmpty() && p(hashMapArr[5])) {
            hashMapArr[4] = hashMapArr[5];
            hashMapArr[5] = new HashMap<>();
        }
        if (!p(hashMapArr[4])) {
            Log.d("ExifInterface", "No image meets the size requirements of a thumbnail image.");
        }
    }
}
